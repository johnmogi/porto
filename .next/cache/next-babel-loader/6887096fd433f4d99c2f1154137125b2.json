{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport NextLink from 'next/link';\nimport MuiLink from '@material-ui/core/Link';\nconst NextComposed = React.forwardRef(function NextComposed(props, ref) {\n  const {\n    as,\n    href,\n    prefetch\n  } = props,\n        other = _objectWithoutProperties(props, [\"as\", \"href\", \"prefetch\"]);\n\n  return __jsx(NextLink, {\n    href: href,\n    prefetch: prefetch,\n    as: as\n  }, __jsx(\"a\", _extends({\n    ref: ref\n  }, other)));\n});\n\nconst Link = (_ref) => {\n  let {\n    href,\n    innerRef,\n    naked\n  } = _ref,\n      other = _objectWithoutProperties(_ref, [\"href\", \"innerRef\", \"naked\"]);\n\n  if (naked) {\n    return __jsx(NextComposed, _extends({\n      \"data-ref\": \"naked\",\n      ref: innerRef,\n      href: href\n    }, other));\n  }\n\n  return __jsx(MuiLink, _extends({\n    component: NextComposed,\n    ref: innerRef,\n    href: href\n  }, other));\n};\n\nconst ForwardLink = React.forwardRef((props, ref) => __jsx(Link, _extends({}, props, {\n  innerRef: ref\n})));\nexport default ForwardLink;","map":null,"metadata":{},"sourceType":"module"}